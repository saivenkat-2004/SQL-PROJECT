create database project;
use project;
CREATE TABLE IF NOT EXISTS supplier (
    sup_id TINYINT AUTO_INCREMENT PRIMARY KEY,
    sup_name VARCHAR(255),
    address TEXT
);

-- 2. Categories Table
CREATE TABLE IF NOT EXISTS categories (
    cat_id TINYINT AUTO_INCREMENT PRIMARY KEY,
    cat_name text
);

-- 3. Employees Table
CREATE TABLE IF NOT EXISTS employees (
    emp_id TINYINT AUTO_INCREMENT PRIMARY KEY,
    emp_name VARCHAR(255),
    hire_date VARCHAR(255)
);

-- 4. Customers Table
CREATE TABLE IF NOT EXISTS customers (
    cust_id SMALLINT AUTO_INCREMENT PRIMARY KEY,
    cust_name VARCHAR(255),
    address TEXT
);

-- 5. Products Table
CREATE TABLE IF NOT EXISTS products (
    prod_id TINYINT AUTO_INCREMENT PRIMARY KEY,
    prod_name VARCHAR(255),
    sup_id TINYINT,
    cat_id TINYINT,
    price DECIMAL(10,2),
    FOREIGN KEY (sup_id) REFERENCES supplier(sup_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (cat_id) REFERENCES categories(cat_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);

-- 6. Orders Table
CREATE TABLE IF NOT EXISTS orders (
    ord_id SMALLINT AUTO_INCREMENT PRIMARY KEY,
    cust_id SMALLINT,
    emp_id TINYINT,
    order_date VARCHAR(255),
    FOREIGN KEY (cust_id) REFERENCES customers(cust_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (emp_id) REFERENCES employees(emp_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);

-- 7. Order_Details Table
CREATE TABLE IF NOT EXISTS order_details (
    ord_detID SMALLINT AUTO_INCREMENT PRIMARY KEY,
    ord_id SMALLINT,
    prod_id TINYINT,
    quantity TINYINT,
    each_price DECIMAL(10,2),
    total_price DECIMAL(10,2),
    FOREIGN KEY (ord_id) REFERENCES orders(ord_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (prod_id) REFERENCES products(prod_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);
SHOW TABLES;
truncate table order_details;
select * from supplier;
select * from categories;
select * from customers;
select * from products;
select * from order_details;
select * from orders;

-- 1.Customer Insights
-- How many unique customers have placed orders?
SELECT COUNT(DISTINCT cust_id) AS unique_customers FROM orders;

-- Which customers have placed the highest number of orders?
SELECT c.cust_id,c.cust_name,count(o.ord_id) as total_orders from customers c 
join orders o on c.cust_id = o.cust_id group by c.cust_id,c.cust_name 
order by total_orders desc limit 1;

-- What is the total and average purchase value per customer?
select c.cust_id,c.cust_name, sum(od.total_price) as total_purchase,avg(od.total_price) as avg_purchase from customers c
join orders o on c.cust_id=o.cust_id
join order_details od on o.ord_id = od.ord_id
group by c.cust_id,c.cust_name;

-- Who are the top 5 customers by total purchase amount?
select c.cust_id,c.cust_name, sum(od.total_price) as total_purchase from customers c
join orders o on c.cust_id=o.cust_id
join order_details od on o.ord_id = od.ord_id
group by c.cust_id,c.cust_name
order by total_purchase desc limit 5;

-- 2. Product Performance
-- How many products exist in each category?
select cat.cat_name,count(p.prod_id) as product_count from categories cat 
join products p on cat.cat_id = p.cat_id 
group by cat.cat_name;

-- What is the average price of products by category?
select cat.cat_name, avg(p.price) as avg_price from categories cat
join products p on cat.cat_id = p.cat_id
group by cat.cat_name;

-- Which products have the highest total sales volume (by quantity)?
select p.prod_id,p.prod_name,sum(od.quantity) as total_quantity
from products p
join order_details od on p.prod_id= od.prod_id
group by p.prod_id,p.prod_name
order by total_quantity desc;

-- What is the total revenue generated by each product?
select p.prod_id,prod_name,sum(od.total_price) as total_revenue from products p
join order_details od on p.prod_id=od.prod_id
group by p.prod_id,p.prod_name
order by total_revenue desc;

-- How do product sales vary by category and supplier?
select cat.cat_name,s.sup_name,sum(od.total_price) as total_sales from products p
join categories cat on p.cat_id = cat.cat_id
join supplier s on p.sup_id=s.sup_id
join order_details od on p.prod_id = od.prod_id
group by cat.cat_id,s.sup_name
order by total_sales desc;

-- 3. Sales and Order Trends
-- How many orders have been placed in total?
select count(*) as total_orders from orders;
-- What is the average value per order?
select avg(order_value) as avg_order_value from(
select o.ord_id,sum(od.total_price) as order_value from orders o
join order_details od on o.ord_id = od.ord_id
group by o.ord_id ) average;

-- On which dates were the most orders placed?
select o.order_date,count(o.ord_id) as order_count from orders o
group by o.order_date
order by order_count desc;

-- What are the monthly trends in order volume and revenue?
select left(o.order_date,7) as month,
count(distinct o.ord_id) as total_orders, sum(od.total_price) as total_revenue 
from orders o
join order_details od on o.ord_id=od.ord_id
group by left(o.order_date,7)
order by month;

-- How do order patterns vary across weekdays and weekends?

select DAYNAME(STR_TO_DATE(o.order_date, '%d/%m/%Y')) as day_name,
       COUNT(distinct o.ord_id) as total_orders,
       SUM(od.total_price) as total_revenue
from orders o
join order_details od on o.ord_id = od.ord_id
group by DAYNAME(STR_TO_DATE(o.order_date, '%d/%m/%Y'))
order by total_orders desc;


-- 4. Supplier Contribution 
-- How many suppliers are there in the database?

select count(*) as total_suppliers from supplier;

-- Which supplier provides the most products?
select s.sup_name, COUNT(p.prod_id) as product_count
from supplier s
join products p on s.sup_id = p.sup_id
group by s.sup_name order by product_count desc limit 1;

-- What is the average price of products from each supplier?
select s.sup_name,avg(p.price) as avg_price from supplier s 
join products p on s.sup_id = p.sup_id
group by s.sup_name;

-- Which suppliers contribute the most to total product sales (by revenue)?
select s.sup_name,sum(od.total_price) as total_revenue from supplier s
join products p on s.sup_id=  p.sup_id
join order_details od on p.prod_id = od.prod_id
group by s.sup_name
order by total_revenue desc;

-- 5. Employee Performance
-- How many employees have processed orders?
select count(distinct emp_id) as total_employees from orders;

-- Which employees have handled the most orders?
select e.emp_name, count( o.ord_id) as order_count from employees e
join orders o on e.emp_id = o.emp_id
group by e.emp_name order by order_count desc limit 1;

-- What is the total sales value processed by each employee?
select e.emp_name ,sum(od.total_price) as total_sales from employees e
join orders o on e.emp_id = o.emp_id
join order_details od on o.ord_id = od.ord_id
group by e.emp_name order by total_sales;

-- What is the average order value handled per employee?
select e.emp_name,avg(order_value) as avg_order_value from employees e
join ( select o.emp_id,o.ord_id, sum(od.total_price) as order_value 
from orders o
join order_details od on o.ord_id = od.ord_id
group by o.emp_id,o.ord_id) t
on e.emp_id=t.emp_id group by e.emp_name order by avg_order_value desc;

-- 6. Order Details Deep Dive
-- What is the relationship between quantity ordered and total price?
select quantity,(quantity*each_price) as total_price from order_details;

-- What is the average quantity ordered per product?
select p.prod_name, avg(od.quantity) as avg_quantity from products p
join order_details od on p.prod_id=od.prod_id
group by p.prod_name order by avg_quantity desc;

-- How does the unit price vary across products and orders?
select p.prod_name,od.ord_id,od.each_price from products p 
join order_details od on p.prod_id=od.prod_id order by p.prod_name,od.each_price;

